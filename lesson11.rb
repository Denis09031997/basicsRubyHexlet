# Итераторы

# times() — простой метод, но слишком ограниченный. 
# Что, например, делать, если нужно обходить какой-то конкретный диапазон чисел в прямом и обратном порядке?
# Для этого в Ruby есть методы upto() и downto():

5.upto(7) do |i|
    puts i
end

puts '-' * 100

5.downto(2) do |j|
    puts j
end

puts '-' * 100

# Этот метод «поднимается/опускается» от цифры, на которой был вызван, до переданного числа.
# Исходное число и конечное включаются в обход. Вот как, например, посчитать сумму этих чисел:

result = 0

5.upto(7) do |i|
    result += i
end

puts "Result = #{result}"

# Так как блок по своей сути — функция, то на него распространяются правила области видимости функций. 
# Все, что определено внутри блока, недоступно снаружи, но блок может «замкнуть» внутри себя внешние переменные, 
# как в примере выше. Переменные замыкаются по ссылке — это значит, что изменение переменной внутри меняет её и 
# снаружи.

# Обратите внимание на вызов метода upto() и передачу блока. Блок передается внутрь метода, 
# но происходит это вне вызывающих скобок.

puts '-' * 100

