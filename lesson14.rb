# Классы

# ООП — отдельная большая тема в Ruby с миллионом своих особенностей. 
# Сейчас мы ещё не готовы её рассматривать плотно, но как минимум нужно знать некоторые базовые конструкции, 
# которые используются широко. В первую очередь речь про классы. Посмотрите на создание даты в Ruby:

# Чтобы использовать класс даты, его необходимо подключить

require 'date'

# Именование классов в Ruby соответствует стилю CamelCase,
# что отличает их от функций/методов и переменных
# Ниже вызовы методов

d = Date.today

puts d
puts d.next # Возвращает объект следующего дня

# Создаёт дату на сегодняшний день и текущее время

time = Time.new
puts time
puts time.thursday?

puts '-' * 100

# Time — это класс. А сама запись означает: вызвать метод new() у класса. 
# new в Ruby — не отдельный оператор, а обычный метод. Конечно, не совсем обычный, 
# но синтаксически он ничем не отличается от обычных методов. Такой синтаксис появился не просто так,
# ниже вы поймете почему. При этом он позволяет проще делать цепочки «по месту»: 
# Time.new.to_i (возвращает unixtimestamp). Ещё немного примеров:

# Создает дату:

puts Time.new 1997, 03, 9
puts ' -' * 120

# Конструктор принадлежит не объектам, а самому классу, поэтому он вызывается на классе. 
# Но раз это метод, то что же такое класс? Посмотрите ещё на пару примеров:

# now, а не new

time1 = Time.now
time2 = Time.utc(2023) # возвращает объект времени в utc

puts time1.to_s
puts time2.to_s

puts '-' * 100

# Здесь, в зависимости от вашего бэкграунда, ответы могут отличаться друг от друга.
#  Кто-то из PHP скажет, что now — статический метод, кто-то скажет, что может быть классов нет,
# а есть только объекты, как в JavaScript. В Ruby нет статических свойств и методов, и есть реальные классы. 
# Но классы — это объекты, у которых есть свои методы и …​ классы.


puts Time.methods.count # 126
puts Time.class # класс Time — это Class
puts Time.class.class # а у класса Class класс — это Class :D
puts Time.superclass # а у класса есть и родитель Object
puts Time.superclass.class # у которого класс — это Class
puts Time.superclass.superclass # а родитель родителя — это BasicObject
# и это мы ещё не говорим про классы объектов
# А ещё можно создать класс
Class.new ... # так как класс — это не только объект, но и класс

# То есть фразу в Ruby «все есть объект» надо понимать практически буквально, 
# но это сильно отличается от того же JavaScript, где под объектом понимается конкретный тип данных object. 
# Объектная модель Ruby наиболее близка языку SmallTalk. С первого взгляда она пугает, но со временем к
#  ней не просто привыкаешь, она становится интуитивной.

